At location ext/standard/url_scanner_ex.c:1005
--Src File: ext/standard/url_scanner_ex.c
Fragment 0:
if ((ctx->buf.len) || (__abst_hole())) {
    do {
        register size_t __nl;
        smart_str *__dest = (smart_str *)((&ctx->result));
        do {
            if (!(__dest)->c) {
                (__dest)->len = 0;
                __nl = (((ctx->buf.len)));
                (__dest)->a = __nl < 78 ? 78 : __nl + 128;
                (__dest)->c = (((((0)))) ? __zend_realloc((((__dest)->c)), (((__dest)->a + 1))) : _erealloc(((((__dest)->c))), ((((__dest)->a + 1))), 0));
            } else {
                __nl = (__dest)->len + (((ctx->buf.len)));
                if (__nl >= (__dest)->a) {
                    (__dest)->a = __nl + 128;
                    (__dest)->c = (((((0)))) ? __zend_realloc((((__dest)->c)), (((__dest)->a + 1))) : _erealloc(((((__dest)->c))), ((((__dest)->a + 1))), 0));
                }
            }
        } while (0);
        memcpy(__dest->c + __dest->len, ((ctx->buf.c)), ((ctx->buf.len)));
        __dest->len = __nl;
    } while (0);
    do {
        register size_t __nl;
        smart_str *__dest = (smart_str *)((&ctx->result));
        do {
            if (!(__dest)->c) {
                (__dest)->len = 0;
                __nl = (((output_len)));
                (__dest)->a = __nl < 78 ? 78 : __nl + 128;
                (__dest)->c = (((((0)))) ? __zend_realloc((((__dest)->c)), (((__dest)->a + 1))) : _erealloc(((((__dest)->c))), ((((__dest)->a + 1))), 0));
            } else {
                __nl = (__dest)->len + (((output_len)));
                if (__nl >= (__dest)->a) {
                    (__dest)->a = __nl + 128;
                    (__dest)->c = (((((0)))) ? __zend_realloc((((__dest)->c)), (((__dest)->a + 1))) : _erealloc(((((__dest)->c))), ((((__dest)->a + 1))), 0));
                }
            }
        } while (0);
        memcpy(__dest->c + __dest->len, ((output)), ((output_len)));
        __dest->len = __nl;
    } while (0);
    *handled_output = ctx->result.c;
    *handled_output_len = ctx->buf.len + output_len;
    ctx->result.c = ((void *)0);
    ctx->result.len = 0;
    do {
        smart_str *__s = (smart_str *)((&ctx->buf));
        if (__s->c) {
            ((0) ? free(__s->c) : _efree((__s->c)));
            __s->c = ((void *)0);
        }
        __s->a = __s->len = 0;
    } while (0);
} else {
    *handled_output = ((void *)0);
}

