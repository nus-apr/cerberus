At location ext/date/php_date.c:3766
--Src File: ext/date/php_date.c
Fragment 0:
if ((isostr_len) || (__abst_hole(isostr))) {
    date_period_initialize(&(dpobj->start), &(dpobj->end), &(dpobj->interval), &recurrences, isostr, isostr_len);
    if (dpobj->start == ((void *)0)) {
        php_error_docref0(((void *)0), (1 << 1L), "The ISO interval '%s' did not contain a start date.", isostr);
    }
    if (dpobj->interval == ((void *)0)) {
        php_error_docref0(((void *)0), (1 << 1L), "The ISO interval '%s' did not contain an interval.", isostr);
    }
    if (dpobj->end == ((void *)0) && recurrences == 0) {
        php_error_docref0(((void *)0), (1 << 1L), "The ISO interval '%s' did not contain an end date or a recurrence count.", isostr);
    }
    if (dpobj->start) {
        timelib_update_ts(dpobj->start, ((void *)0));
    }
    if (dpobj->end) {
        timelib_update_ts(dpobj->end, ((void *)0));
    }
} else {
    intobj = (php_interval_obj *)zend_object_store_get_object(interval);
    dateobj = (php_date_obj *)zend_object_store_get_object(start);
    clone = timelib_time_ctor();
    memcpy(clone, dateobj->time, sizeof(timelib_time));
    if (dateobj->time->tz_abbr) {
        clone->tz_abbr = (__extension__ (__builtin_constant_p(dateobj->time->tz_abbr) && ((size_t)(const void *)((dateobj->time->tz_abbr) + 1) - (size_t)(const void *)(dateobj->time->tz_abbr) == 1) ? (((const char *)(dateobj->time->tz_abbr))[0] == '\x00' ? (char *)calloc((size_t)1, (size_t)1) : ({
            size_t __len = strlen(dateobj->time->tz_abbr) + 1;
            char *__retval = (char *)malloc(__len);
            if (__retval != ((void *)0))
                __retval = (char *)memcpy(__retval, dateobj->time->tz_abbr, __len);
            __retval;
        })) : __strdup(dateobj->time->tz_abbr)));
    }
    if (dateobj->time->tz_info) {
        clone->tz_info = dateobj->time->tz_info;
    }
    dpobj->start = clone;
    dpobj->interval = timelib_rel_time_clone(intobj->diff);
    if (end) {
        dateobj = (php_date_obj *)zend_object_store_get_object(end);
        clone = timelib_time_clone(dateobj->time);
        dpobj->end = clone;
    }
}
