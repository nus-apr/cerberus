#!/bin/bash
script_dir="$( cd "$( dirname "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )"
benchmark_name=$(echo $script_dir | rev | cut -d "/" -f 4 | rev)
project_name=$(echo $script_dir | rev | cut -d "/" -f 3 | rev)
bug_id=$(echo $script_dir | rev | cut -d "/" -f 2 | rev)
dir_name=$1/$benchmark_name/$project_name/$bug_id
setup_dir_path=$script_dir/../
instrument_file="djpeg.c"
fix_file=$2


cat <<EOF > $dir_name/src/repair.yml
algorithm:
  type: exhaustive
coverage:
  method:
    files-to-instrument:
    - $src_file
    type: gcov
localization:
  type: spectrum-based
  metric: tarantula
  restrict-to-files:
  - $fix_file
optimizations:
  ignore-dead-code: true
  ignore-equivalent-insertions: true
  ignore-string-equivalent-snippets: true
program:
  build-instructions:
    steps:
    - command: REPAIR_TOOL=darjeeling ./prebuild
      directory: $setup_dir_path
    - command: REPAIR_TOOL=darjeeling ./build
      directory: $setup_dir_path
    steps-for-coverage:
    - command: make clean
      directory: $dir_name/src
    - command: CFLAGS=--coverage LDFLAGS=--coverage ./config.sh
      directory: $setup_dir_path
    - command: CFLAGS=--coverage LDFLAGS=--coverage ./build.sh
      directory: $setup_dir_path
    time-limit: 30
  image: libjpeg-cve_2012_2806
  language: c
  source-directory: $dir_name/src
  tests:
    tests:
    - ./test.sh
    time-limit: 5
    type: shell
    workdir: $setup_dir_path
resource-limits:
  candidates: 1000
seed: 0
threads: 1
transformations:
  schemas:
  - type: delete-statement
  - type: append-statement
  - type: prepend-statement
  - type: replace-statement
  - type: insert-line
version: 1.0
EOF


