#!/bin/bash
script_dir="$( cd "$( dirname "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )"
benchmark_name=$(echo $script_dir | rev | cut -d "/" -f 4 | rev)
project_name=$(echo $script_dir | rev | cut -d "/" -f 3 | rev)
bug_id=$(echo $script_dir | rev | cut -d "/" -f 2 | rev)
dir_name=$1/$benchmark_name/$project_name/$bug_id
mkdir $dir_name/cpr
cd $dir_name/src
make clean


autoreconf -i
CC=$CPR_CC ./configure CFLAGS="-I/klee/source/include -g -O0 -static" --without-simd
CC=$CPR_CC make CFLAGS="-I/klee/source/include -g -O0 -static" -j32

sed -i '328i }' jdmarker.c
sed -i '327i CPR_OUTPUT("obs", "i32", i - MAX_COMPS_IN_SCAN);\n' jdmarker.c
sed -i '327i klee_assert( i <= MAX_COMPS_IN_SCAN);\n' jdmarker.c
sed -i '326d' jdmarker.c
sed -i '326i for (i = 0; i < cinfo->num_components && (__cpr_choice("L1229", "bool", (int[]){i, MAX_COMPS_IN_SCAN}, (char*[]){"x", "t"}, 2, (int*[]){}, (char*[]){}, 0)) ; i++) {' jdmarker.c
sed -i '19i #ifndef CPR_OUTPUT\n#define CPR_OUTPUT(id, typestr, value) value\n#endif\n' jdmarker.c
sed -i '19i #include <klee/klee.h>' jdmarker.c
git add jdmarker.c
git commit -m "instrument cpr"

make CXX=$CPR_CXX CC=$CPR_CC CFLAGS="-I/klee/source/include -g -O0 -static" -j32


cat <<EOF > $dir_name/cpr/repair.conf
project_path:$dir_name
tag_id:$bug_id
src_directory:src
config_command:skip
build_command:skip
depth:3
test_output_list:cpr/t1.smt2
spec_path:cpr/spec.smt2
binary_path:djpeg
custom_comp_list:cpr/components/x.smt2,cpr/components/t.smt2
general_comp_list:equal.smt2,not-equal.smt2,less-than.smt2,less-or-equal.smt2,constant_a.smt2
test_input_list:-colors 256 -bmp \$POC
poc_path:$script_dir/../tests/1.gif
static:false
build_flags:disable
loc_patch:$dir_name/src/jdmarker.c:331
loc_bug:$dir_name/src/jdmarker.c:332
gen_limit:40
mask_arg:0,1,2
max-fork:22
dist_metric:angelic

EOF


# Create patch components
mkdir $dir_name/cpr/components
declare -a arr_var=("x" "t")
# Create components for program variables
for i in "${arr_var[@]}"
do
cat <<EOF > $dir_name/cpr/components/$i.smt2
(declare-const rvalue_$i (_ BitVec 32))
(declare-const lvalue_$i (_ BitVec 32))
(declare-const rreturn (_ BitVec 32))
(declare-const lreturn (_ BitVec 32))
(assert (and (= rreturn rvalue_$i) (= lreturn lvalue_$i)))
EOF
done


# Create Specification Files
cat <<EOF > $dir_name/cpr/spec.smt2
(declare-fun output!i32!obs!0 () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (= true (bvslt (concat  (select  output!i32!obs!0 (_ bv3 32) ) (concat  (select  output!i32!obs!0 (_ bv2 32) ) (concat  (select  output!i32!obs!0 (_ bv1 32) ) (select  output!i32!obs!0 (_ bv0 32) ) ) ) ) (_ bv0 32)) ))

EOF

cat <<EOF > $dir_name/cpr/t1.smt2
(declare-const obs!0 (_ BitVec 32))
(assert (= true (bvslt obs!0 (_ bv0 32) )))
EOF

if [ ! -f "$dir_name/src/INSTRUMENTED_CPR" ]; then
    touch "$dir_name/src/INSTRUMENTED_CPR"
fi
