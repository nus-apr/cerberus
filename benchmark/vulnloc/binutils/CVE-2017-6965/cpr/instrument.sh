#!/bin/bash
script_dir="$( cd "$( dirname "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )"
benchmark_name=$(echo $script_dir | rev | cut -d "/" -f 4 | rev)
project_name=$(echo $script_dir | rev | cut -d "/" -f 3 | rev)
bug_id=$(echo $script_dir | rev | cut -d "/" -f 2 | rev)
dir_name=$1/$benchmark_name/$project_name/$bug_id
mkdir $dir_name/cpr
cd $dir_name/src
make clean

find . -name "*.cache" | xargs rm -rf
CC=wllvm CXX=wllvm++ CFLAGS="-g -O0" CXXFLAGS="$CFLAGS" ./configure --disable-shared --disable-gdb --disable-libdecnumber --disable-readline --disable-sim --disable-werror
make -j32

sed -i '12343s/.*/if (target_specific_reloc_handling (rp, start, end, symtab))/' binutils/readelf.c
sed -i '11641i }' binutils/readelf.c
sed -i '11639i klee_assert( start + reloc->r_offset + reloc_size < end );\n' binutils/readelf.c
sed -i '11639i __cpr_output("obs", "i32", end - start - reloc->r_offset - reloc_size);' binutils/readelf.c
sed -i '11639i int reloc_size = reloc_type == 1 ? 4 : 2; \n if(__cpr_choice("L2440", "bool", (int[]){start, end, reloc->r_offset, reloc_size, reloc->r_addend}, (char*[]){"x", "y", "z", "m", "n"}, 5, (int*[]){}, (char*[]){}, 0)) error(_("MN10300 sym diff reloc writes past end of section"));\n else{' binutils/readelf.c
sed -i '11594i unsigned char *     end,' binutils/readelf.c
sed -i '168i #ifndef CPR_OUTPUT\n#define CPR_OUTPUT(id, typestr, value) value\n#endif\n' binutils/readelf.c
sed -i '168i #include <klee/klee.h>' binutils/readelf.c
make CXX=wllvm++ CC=wllvm CFLAGS='-I/klee/source/include -g -O0' CXXFLAGS='-I/klee/source/include -g -O0' LDFLAGS='-L/klee/build/lib -lkleeRuntest -L/CPR/lib -lcpr_runtime' -j32


cat <<EOF > $dir_name/cpr/repair.conf
project_path:$dir_name
tag_id:$bug_id
src_directory:src
binary_path:binutils/readelf
config_command:skip
build_command:skip
custom_comp_list:cpr/components/x.smt2,cpr/components/y.smt2,cpr/components/z.smt2,cpr/components/m.smt2,cpr/components/n.smt2
general_comp_list:less-than.smt2,less-or-equal.smt2,addition.smt2
depth:3
loc_patch:$dir_name/src/binutils/readelf.c:11646
loc_bug:$dir_name/src/binutils/readelf.c:11648
spec_path:cpr/spec.smt2
test_input_list:-w \$POC
test_output_list:cpr/t1.smt2
poc_path:$script_dir/../tests/1.bin
klee_flags:-check-overshift=0
dist_metric:angelic
static:false
timeout_klee:3600
build_flags:disable
EOF


# Create patch components
mkdir $dir_name/cpr/components
declare -a arr_var=("x" "y" "z" "m" "n")
# Create components for program variables
for i in "${arr_var[@]}"
do
cat <<EOF > $dir_name/cpr/components/$i.smt2
(declare-const rvalue_$i (_ BitVec 32))
(declare-const lvalue_$i (_ BitVec 32))
(declare-const rreturn (_ BitVec 32))
(declare-const lreturn (_ BitVec 32))
(assert (and (= rreturn rvalue_$i) (= lreturn lvalue_$i)))
EOF
done


# Create Specification Files
cat <<EOF > $dir_name/cpr/spec.smt2
(declare-fun output!i32!obs!0 () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (= true (bvsgt (concat  (select  output!i32!obs!0 (_ bv3 32) ) (concat  (select  output!i32!obs!0 (_ bv2 32) ) (concat  (select  output!i32!obs!0 (_ bv1 32) ) (select  output!i32!obs!0 (_ bv0 32) ) ) ) ) (_ bv0 32)) ))
EOF

cat <<EOF > $dir_name/cpr/t1.smt2
(declare-const obs!0 (_ BitVec 32))
(assert (= true (bvsgt obs!0 (_ bv0 32) )))

EOF

if [ ! -f "$dir_name/src/INSTRUMENTED_CPR" ]; then
    touch "$dir_name/src/INSTRUMENTED_CPR"
fi
