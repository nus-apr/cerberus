#!/bin/bash
script_dir="$( cd "$( dirname "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )"
benchmark_name=$(echo $script_dir | rev | cut -d "/" -f 4 | rev)
project_name=$(echo $script_dir | rev | cut -d "/" -f 3 | rev)
bug_id=$(echo $script_dir | rev | cut -d "/" -f 2 | rev)
dir_name=$1/$benchmark_name/$project_name/$bug_id
mkdir $dir_name/cpr
cd $dir_name/src
make clean


CC=wllvm CXX=wllvm++ ./configure CFLAGS='-g -static' CXXFLAGS='-g -static'
CC=wllvm CXX=wllvm++ make -j32

sed -i 's/fabs/fabs_cpr/g' src/backend_geojson.c
sed -i 's/fabs/fabs_cpr/g' src/render.c
sed -i 's/fabs/fabs_cpr/g' src/trace.c
sed -i 's/fabs/fabs_cpr/g' src/trans.c

make CFLAGS="-lcpr_proxy -L/CPR/lib -g -static" -j32

sed -i '994i CPR_OUTPUT("obs", "i32", 0x7fffffff-bmpinfo.w);' src/bitmap_io.c
sed -i '481i if(__cpr_choice("L1634", "bool", (int[]){bmpinfo.w, threshold, 0x7fffffff, bmpinfo.h, bmpinfo.InfoSize}, (char*[]){"x", "y", "z", "m", "n"}, 5, (int*[]){}, (char*[]){}, 0)) goto format_error;' src/bitmap_io.c
sed -i '14i #ifndef CPR_OUTPUT\n#define CPR_OUTPUT(id, typestr, value) value\n#endif\n' src/bitmap_io.c
# git add libtiff/tif_dirwrite.c
# git commit -m "instrument cpr"

make CC=$CPR_CC CXX=$CPR_CXX CFLAGS='-g -I /CPR/runtime -L/CPR/runtime -lcpr_runtime -lkleeRuntest -static' -j32
cat <<EOF > $dir_name/cpr/repair.conf
project_path:$dir_name
tag_id:$bug_id
src_directory:src
binary_path:src/potrace
config_command:skip
build_command:skip
custom_comp_list:cpr/components/x.smt2,cpr/components/y.smt2,cpr/components/z.smt2,cpr/components/m.smt2,cpr/components/n.smt2
general_comp_list:equal.smt2,not-equal.smt2,less-than.smt2,less-or-equal.smt2,constant_a.smt2
test_input_list:\$POC
test_output_list:cpr/t1.smt2
poc_path:$script_dir/../tests/test_1
depth:3
loc_patch:$dir_name/src/src/bitmap_io.c:484
loc_bug:$dir_name/src/src/bitmap_io.c:998
klee_flags:--link-llvm-lib=/CPR/lib/libcpr_proxy.bca
gen_limit:40
stack_size:15000
EOF


# Create patch components
mkdir $dir_name/cpr/components
declare -a arr_var=("x" "y" "z" "m" "n")
# Create components for program variables
for i in "${arr_var[@]}"
do
cat <<EOF > $dir_name/cpr/components/$i.smt2
(declare-const rvalue_$i (_ BitVec 32))
(declare-const lvalue_$i (_ BitVec 32))
(declare-const rreturn (_ BitVec 32))
(declare-const lreturn (_ BitVec 32))
(assert (and (= rreturn rvalue_$i) (= lreturn lvalue_$i)))
EOF
done


# Create Specification Files
cat <<EOF > $dir_name/cpr/spec.smt2
(declare-fun output!i32!obs!0 () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (= true (bvsge (concat  (select  output!i32!obs!0 (_ bv3 32) ) (concat  (select  output!i32!obs!0 (_ bv2 32) ) (concat  (select  output!i32!obs!0 (_ bv1 32) ) (select  output!i32!obs!0 (_ bv0 32) ) ) ) ) (_ bv0 32)) ))
EOF


cat <<EOF > $dir_name/cpr/t1.smt2
(declare-const obs!0 (_ BitVec 32))
(assert (= true (bvsge obs!0 (_ bv0 32) )))
EOF


if [ ! -f "$dir_name/src/INSTRUMENTED_CPR" ]; then
    touch "$dir_name/src/INSTRUMENTED_CPR"
fi
