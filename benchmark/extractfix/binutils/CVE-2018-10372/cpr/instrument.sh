#!/bin/bash
script_dir="$( cd "$( dirname "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )"
benchmark_name=$(echo $script_dir | rev | cut -d "/" -f 4 | rev)
project_name=$(echo $script_dir | rev | cut -d "/" -f 3 | rev)
bug_id=$(echo $script_dir | rev | cut -d "/" -f 2 | rev)
dir_name=$1/$benchmark_name/$project_name/$bug_id
mkdir $dir_name/cpr
cd $dir_name/src
make clean



CC=wllvm CXX=wllvm++ CFLAGS="-g -O0" CXXFLAGS="$CFLAGS" ./configure --disable-shared --disable-gdb --disable-libdecnumber --disable-readline --disable-sim --disable-werror
make -j32
sed -i '9291i }\n' binutils/dwarf.c
sed -i '9290i CPR_OUTPUT("obs", "i32", x -num);\n' binutils/dwarf.c
sed -i '9289d' binutils/dwarf.c
sed -i '9289i if(!do_display) { if(__cpr_choice("L2440", "bool", (int[]){limit, num, ph}, (char*[]){"x", "y", "z"},3, (int*[]){}, (char*[]){}, 0)) return 0;' binutils/dwarf.c
sed -i '9289i  size_t num = sizeof (uint64_t);size_t x = limit - ph;' binutils/dwarf.c
sed -i '33i #ifndef CPR_OUTPUT\n#define CPR_OUTPUT(id, typestr, value) value\n#endif\n' binutils/dwarf.c
git add binutils/dwarf.c
git commit -m "instrument cpr"
cd binutils
make CXX=$CPR_CXX CC=$CPR_CC  -j32

cat <<EOF > $dir_name/cpr/repair.conf
project_path:$dir_name
tag_id:$bug_id
src_directory:src/binutils
binary_path:readelf
config_command:skip
build_command:skip
custom_comp_list:components/x.smt2,components/y.smt2,components/z.smt2
general_comp_list:equal.smt2,less-than.smt2,not-equal.smt2,less-or-equal.smt2,addition.smt2
depth:3
loc_patch:$dir_name/src/binutils/dwarf.c:9294
loc_bug:$dir_name/src/binutils/dwarf.c:9295
gen_limit:40
stack_size:15000
spec_path:cpr/spec.smt2
test_input_list:-w \$POC
test_output_list:cpr/t1.smt2
poc_path:$script_dir/../tests/1.bin
klee_flags:-check-overshift=0
mask_arg:0
dist_metric:angelic
static:false
timeout_klee:3600
build_flags:disable
EOF


# Create patch components
mkdir $dir_name/cpr/components
declare -a arr_var=("x" "y" "z")
# Create components for program variables
for i in "${arr_var[@]}"
do
cat <<EOF > $dir_name/cpr/components/$i.smt2
(declare-const rvalue_$i (_ BitVec 32))
(declare-const lvalue_$i (_ BitVec 32))
(declare-const rreturn (_ BitVec 32))
(declare-const lreturn (_ BitVec 32))
(assert (and (= rreturn rvalue_$i) (= lreturn lvalue_$i)))
EOF
done


# Create Specification Files
cat <<EOF > $dir_name/cpr/spec.smt2
(declare-fun output!i32!obs () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (= false (bvsle (concat  (select  output!i32!obs (_ bv3 32) ) (concat  (select  output!i32!obs (_ bv2 32) ) (concat  (select  output!i32!obs (_ bv1 32) ) (select  output!i32!obs (_ bv0 32) ) ) ) ) (_ bv0 32)) ))

EOF

cat <<EOF > $dir_name/cpr/t1.smt2
(declare-const obs!0 (_ BitVec 32))
(assert (= false (bvsle obs!0 (_ bv0 32) )))

EOF

if [ ! -f "$dir_name/src/INSTRUMENTED_CPR" ]; then
    touch "$dir_name/src/INSTRUMENTED_CPR"
fi
